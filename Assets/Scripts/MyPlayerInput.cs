//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MyPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyPlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyPlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movment"",
            ""id"": ""4a864d62-047e-4168-bea9-c3071696c13a"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""851defa9-23bd-4e0f-a618-14597ae31e17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveBackward"",
                    ""type"": ""Value"",
                    ""id"": ""9abe49e6-f757-48b6-876b-5b6fac701b8e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""a02aa4c2-7791-4634-ba98-77c3821cc5cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cc7cf1e6-5ea2-4300-92f0-1a5e21ab7b81"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f3fcaa9a-37cb-4d37-998b-18f4b4725c2a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""125f78d7-e565-42e5-9c8c-8bf22ab126c3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""be1be6f6-7c69-4f7c-86c9-6c0df66164cd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBackward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b6e4fb8-3ea9-4092-96b1-bafeeff9ff9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d2a64b01-0aea-4120-8d73-b9a1661bb2e4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99fb3670-1294-459f-b32f-5f3f32b99f0c"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovmentTouch"",
            ""id"": ""5084b976-8918-432e-b300-08e7722e2c8b"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""c2db43b9-a6c8-4fe2-ac10-3e3f941a3048"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f35c0e50-3a70-45f7-ac7e-febd89a85fa3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4230ba31-ec88-4e26-b8cd-418a9ba35c1d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37a359b0-a9d9-45e9-be26-dbb9ee42d1b2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movment
        m_Movment = asset.FindActionMap("Movment", throwIfNotFound: true);
        m_Movment_MoveForward = m_Movment.FindAction("MoveForward", throwIfNotFound: true);
        m_Movment_MoveBackward = m_Movment.FindAction("MoveBackward", throwIfNotFound: true);
        m_Movment_MouseLook = m_Movment.FindAction("MouseLook", throwIfNotFound: true);
        // MovmentTouch
        m_MovmentTouch = asset.FindActionMap("MovmentTouch", throwIfNotFound: true);
        m_MovmentTouch_MoveForward = m_MovmentTouch.FindAction("MoveForward", throwIfNotFound: true);
        m_MovmentTouch_Look = m_MovmentTouch.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movment
    private readonly InputActionMap m_Movment;
    private IMovmentActions m_MovmentActionsCallbackInterface;
    private readonly InputAction m_Movment_MoveForward;
    private readonly InputAction m_Movment_MoveBackward;
    private readonly InputAction m_Movment_MouseLook;
    public struct MovmentActions
    {
        private @MyPlayerInput m_Wrapper;
        public MovmentActions(@MyPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_Movment_MoveForward;
        public InputAction @MoveBackward => m_Wrapper.m_Movment_MoveBackward;
        public InputAction @MouseLook => m_Wrapper.m_Movment_MouseLook;
        public InputActionMap Get() { return m_Wrapper.m_Movment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovmentActions set) { return set.Get(); }
        public void SetCallbacks(IMovmentActions instance)
        {
            if (m_Wrapper.m_MovmentActionsCallbackInterface != null)
            {
                @MoveForward.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveForward;
                @MoveBackward.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveBackward;
                @MoveBackward.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveBackward;
                @MoveBackward.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMoveBackward;
                @MouseLook.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnMouseLook;
            }
            m_Wrapper.m_MovmentActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @MoveBackward.started += instance.OnMoveBackward;
                @MoveBackward.performed += instance.OnMoveBackward;
                @MoveBackward.canceled += instance.OnMoveBackward;
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
            }
        }
    }
    public MovmentActions @Movment => new MovmentActions(this);

    // MovmentTouch
    private readonly InputActionMap m_MovmentTouch;
    private IMovmentTouchActions m_MovmentTouchActionsCallbackInterface;
    private readonly InputAction m_MovmentTouch_MoveForward;
    private readonly InputAction m_MovmentTouch_Look;
    public struct MovmentTouchActions
    {
        private @MyPlayerInput m_Wrapper;
        public MovmentTouchActions(@MyPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_MovmentTouch_MoveForward;
        public InputAction @Look => m_Wrapper.m_MovmentTouch_Look;
        public InputActionMap Get() { return m_Wrapper.m_MovmentTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovmentTouchActions set) { return set.Get(); }
        public void SetCallbacks(IMovmentTouchActions instance)
        {
            if (m_Wrapper.m_MovmentTouchActionsCallbackInterface != null)
            {
                @MoveForward.started -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnMoveForward;
                @Look.started -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MovmentTouchActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_MovmentTouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public MovmentTouchActions @MovmentTouch => new MovmentTouchActions(this);
    public interface IMovmentActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMoveBackward(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
    }
    public interface IMovmentTouchActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
